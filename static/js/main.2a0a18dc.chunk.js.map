{"version":3,"sources":["style/css/input.module.css","style/css/hourlyWeather.module.css","style/css/home.module.css","style/css/title.module.css","style/css/dailyWeather.module.css","style/css/dailyWeatherWrap.module.css","style/css/hourlyWeatherWrap.module.css","style/css/errorInfo.module.css","style/css/spinner.module.css","style/css/layout.module.css","style/css/currentWeather.module.css","serviceWorker.js","HOC/Aux.js","components/title.js","components/input.js","store/actions/forecast.js","store/actions/actionTypes.js","APIKey.js","components/currentWeather/currentWeather.js","shared/tempConverter.js","shared/timeConverter.js","components/currentWeather/currentWeatherWrap.js","components/dailyWeather/dailyWeather.js","components/dailyWeather/dailyWeatherWrap.js","components/hourlyWeather/hourlyWeather.js","components/hourlyWeather/hourlyWeatherWrap.js","containers/ErrorBoundary.js","components/errorInfo.js","components/spinner.js","containers/Home.js","components/layout.js","App.js","shared/utility.js","store/reducer/forecast.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","aux","props","children","title","className","classes","Title","style","color","fontSize","fontFamily","input","inputClass","Input","currentWeather","push","changed","onKeyDown","KeyDown","join","type","placeholder","onChange","fetchForecastSuccess","weatherForecastData","currentLocationDailyWeatherData","position","lat","lon","fetchForecastFailed","error","message","googleGeoAPIKey","CTemp","FTemp","temperatureType","selected","CurrentWeather","CurrentWeatherOverview","city","cityShown","time","timeShown","src","weatherIcon","alt","temp","tempType","onClick","switchFtoC","switchCtoF","description","weatherDescription","CurrentWeatherDetail","sunriseTime","wind_speed","humidity","sunsetTime","uvi","feelsLike","kTOC","Math","round","kTOF","timeFormat","timestamp","timezone","formatType","date","Date","moment","tz","format","CurrentWeatherWrap","useEffect","timeArray","hourlyWeather","slice","map","item","dt","Number","todayEnd","indexOf","onSetTodayEndIndex","feels_like","sunrise","sunset","currentTimeStamp","getTime","currentTime","temperature","Aux","onSwitchTempTypeFtoC","onSwitchTempTypeCtoF","dailyWeather","DailyWeather","clickTarget","minTemp","maxTemp","data-icon","data-inline","DailyWeatherWrap","dayStart","dayEnd","i","maxTemperature","weather","icon","minTemperature","max","min","key","e","tomorrowStart","index","dailyWeatherStart","dailyWeatherEnd","onGetIndex","onClickTargetHandler","HourlyWeather","WeatherDescription","cloud","hourlyWeatherWrap","hourlyWeatherStart","hourlyWeatherEnd","start","end","all","clouds","main","tempTypeHandler","HourlyWeatherWrap","ErrorBoundary","state","hasError","errorInfo","this","setState","console","log","Component","ErrorInfo","spinner","loader","Home","onKeyDownHandler","keyCode","target","value","onCitySearch","setTimeout","onCurrentLocationSearch","redirectToError","weatherForecast","to","router","path","component","homeClass","connect","latLon","dispatch","OWAPIKey","GoogleAPIKey","getState","a","axios","get","locationData","data","results","geometry","latitude","longitude","lng","formatted_address","actions","post","currentLatitude","currentLongitude","currentLocation","layout","Layout","App","updateObj","oldObj","updatedProperties","initialState","action","current","daily","list","switchTempTypeFtoC","switchTempTypeCtoF","setTodayEndIndex","getIndex","reducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2a0a18dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__2OP11\",\"changed\":\"input_changed__1lgZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HourlyWeather\":\"hourlyWeather_HourlyWeather__oLjX-\",\"WeatherDescription\":\"hourlyWeather_WeatherDescription__3Mjc7\",\"iconify\":\"hourlyWeather_iconify__EhD5W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"home_Home__3EdI9\",\"changed\":\"home_changed__zwIZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"title_Title__2Pb7D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DailyWeather\":\"dailyWeather_DailyWeather__hki_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DailyWeatherWrap\":\"dailyWeatherWrap_DailyWeatherWrap__1RlqK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HourlyWeatherWrap\":\"hourlyWeatherWrap_HourlyWeatherWrap__28Pcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorInfo\":\"errorInfo_ErrorInfo__2Guve\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"spinner_loader__2x_U4\",\"load8\":\"spinner_load8__2hZN8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"layout_Layout__1r63v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CurrentWeather\":\"currentWeather_CurrentWeather__2MAe-\",\"CurrentWeatherOverview\":\"currentWeather_CurrentWeatherOverview__2YbM2\",\"city\":\"currentWeather_city__3v6Wq\",\"time\":\"currentWeather_time__2sClk\",\"temp\":\"currentWeather_temp__210oY\",\"tempType\":\"currentWeather_tempType__1udRb\",\"description\":\"currentWeather_description__2hKPp\",\"CTemp\":\"currentWeather_CTemp__9rHUf\",\"FTemp\":\"currentWeather_FTemp__IEGWs\",\"selected\":\"currentWeather_selected__1rYgy\",\"CurrentWeatherDetail\":\"currentWeather_CurrentWeatherDetail__TPdey\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const aux = (props) => props.children\n\nexport default aux\n","import React from 'react'\nimport classes from '../style/css/title.module.css'\n\nconst title = (props) => {\n    return (\n        <div className={classes.Title}>\n            <h1\n                style={{\n                    color: 'white',\n                    fontSize: '4em',\n                    fontFamily: 'Rajdhani',\n                }}\n            >\n                GOOD DAY <span style={{ color: 'rgb(253, 108, 15)' }}>WEATHER</span> APP\n            </h1>\n        </div>\n    )\n}\n\nexport default title\n","import React from 'react'\n\nimport classes from '../style/css/input.module.css'\n\nconst input = (props) => {\n    let inputClass = [classes.Input]\n    if (props.currentWeather) {\n        inputClass.push(classes.changed)\n    }\n    return (\n        <div>\n            <input\n                onKeyDown={props.KeyDown}\n                className={inputClass.join(' ')}\n                type=\"text\"\n                placeholder=\"city weather forecast\"\n                onChange={props.changed}\n            />\n        </div>\n    )\n}\n\nexport default input\n","/* eslint-disable no-unused-expressions */\nimport * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\nexport const fetchForecastSuccess = (weatherForecastData, currentLocationDailyWeatherData, position, lat, lon) => {\n    return {\n        type: actionTypes.FETCH_FORECAST_SUCCESS,\n        weatherForecastData: weatherForecastData,\n        currentLocationDailyWeatherData: currentLocationDailyWeatherData,\n        position: position,\n        lat: lat,\n        lon: lon,\n    }\n}\n\nexport const fetchForecastFailed = (error) => {\n    return {\n        type: actionTypes.FETCH_FORECAST_FAILED,\n        error: error.message,\n    }\n}\n\nexport const switchTempTypeFtoC = () => {\n    return {\n        type: actionTypes.SWITCH_TEMP_TYPE_F_TO_C,\n    }\n}\n\nexport const switchTempTypeCtoF = () => {\n    return {\n        type: actionTypes.SWITCH_TEMP_TYPE_C_TO_F,\n    }\n}\n\n//* global variables\n\nexport const currentLocationSearch = (OWAPIKey, GoogleAPIKey) => {\n    return async (dispatch) => {\n        try {\n            const latLon = await axios.post(`https://www.googleapis.com/geolocation/v1/geolocate?key=${GoogleAPIKey}`)\n            const currentLatitude = latLon.data.location.lat\n            const currentLongitude = latLon.data.location.lng\n            const weatherForecastData = await axios.get(\n                `https://api.openweathermap.org/data/2.5/onecall?lat=${currentLatitude}&lon=${currentLongitude}&appid=${OWAPIKey}`\n            )\n            const currentLocation = await axios.get(\n                `https://maps.googleapis.com/maps/api/geocode/json?latlng=${currentLatitude},${currentLongitude}&result_type=administrative_area_level_3&key=${GoogleAPIKey}`\n            )\n            const {\n                data: {\n                    results: [{ formatted_address: position }],\n                },\n            } = currentLocation\n\n            const currentLocationDailyWeatherData = await axios.get(\n                `https://api.openweathermap.org/data/2.5/forecast?lat=${currentLatitude}&lon=${currentLongitude}&appid=${OWAPIKey}`\n            )\n\n            dispatch(\n                fetchForecastSuccess(\n                    weatherForecastData.data,\n                    currentLocationDailyWeatherData.data,\n                    position,\n                    currentLatitude,\n                    currentLongitude\n                )\n            )\n        } catch (error) {\n            dispatch(fetchForecastFailed(error))\n        }\n    }\n}\n\nexport const citySearch = (location, OWAPIKey, GoogleAPIKey) => {\n    return async (dispatch, getState) => {\n        try {\n            if (location) {\n                const locationData = await axios.get(\n                    `https://maps.googleapis.com/maps/api/geocode/json?address=${location}&result_type=political&key=${GoogleAPIKey}`\n                )\n                // if (locationData.data.results.length > 0) {\n                const {\n                    data: {\n                        results: [\n                            {\n                                geometry: {\n                                    location: { lat: latitude, lng: longitude },\n                                },\n                                formatted_address: position,\n                            },\n                        ],\n                    },\n                } = locationData\n\n                const weatherForecastData = await axios.get(\n                    `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&appid=${OWAPIKey}`\n                )\n\n                const currentLocationDailyWeatherData = await axios.get(\n                    `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${OWAPIKey}`\n                )\n\n                dispatch(\n                    fetchForecastSuccess(\n                        weatherForecastData.data,\n                        currentLocationDailyWeatherData.data,\n                        position,\n                        latitude,\n                        longitude\n                    )\n                )\n                // }\n            }\n        } catch (error) {\n            dispatch(fetchForecastFailed(error))\n        }\n    }\n}\n\nexport const setTodayEndIndex = (todayEnd) => {\n    return {\n        type: actionTypes.SET_TODAY_END_INDEX,\n        todayEnd: todayEnd,\n    }\n}\n\nexport const getIndex = (start, end) => {\n    return {\n        type: actionTypes.GET_INDEX,\n        index: [start, end],\n    }\n}\n","export const FETCH_FORECAST_SUCCESS = 'FETCH_FORECAST_SUCCESS'\nexport const FETCH_FORECAST_FAILED = 'FETCH_FORECAST_FAILED'\nexport const SWITCH_TEMP_TYPE_F_TO_C = 'SWITCH_TEMP_TYPE_F_TO_C'\nexport const SWITCH_TEMP_TYPE_C_TO_F = 'SWITCH_TEMP_TYPE_C_TO_F'\nexport const GET_INDEX = 'GET_INDEX'\nexport const SET_TODAY_END_INDEX = 'SET_TODAY_END_INDEX'\n","export const OpenWeatherAPIKey = 'ff19d157e14f44206656bad4cc1189ab'\nexport const googleGeoAPIKey = 'AIzaSyD-h4Aob9JC2TSsgEfhjO_KSIJFGxpQ9mQ'\n","import React from 'react'\n\nimport classes from '../../style/css/currentWeather.module.css'\n\nconst currentWeather = (props) => {\n    let CTemp = [classes.CTemp]\n    let FTemp = [classes.FTemp]\n\n    if (props.temperatureType) {\n        CTemp.push(classes.selected)\n    } else {\n        FTemp.push(classes.selected)\n    }\n\n    const currentWeatherCondition = (\n        <div className={classes.CurrentWeather}>\n            <div className={classes.CurrentWeatherOverview}>\n                <section>\n                    <div className={classes.city}>{props.cityShown}</div>\n                    <div className={classes.time}>{props.timeShown}</div>\n                </section>\n                <img src={`http://openweathermap.org/img/wn/${props.weatherIcon}@4x.png`} alt=\"icon\" />\n                <section>\n                    <div className={classes.temp}>{props.temp}&deg;</div>\n                    <div className={classes.tempType}>\n                        <span onClick={props.switchFtoC} className={CTemp.join(' ')}>\n                            C\n                        </span>{' '}\n                        |{' '}\n                        <span onClick={props.switchCtoF} className={FTemp.join(' ')}>\n                            F\n                        </span>\n                    </div>\n                    <div className={classes.description}>{props.weatherDescription}</div>\n                </section>\n            </div>\n\n            <div className={classes.CurrentWeatherDetail}>\n                <div>\n                    <span>sunrise</span>\n                    <br />\n                    <span>{props.sunriseTime}</span>\n                </div>\n                <div>\n                    <span>wind</span> <br />\n                    <span>{props.wind_speed} kmph</span>\n                </div>\n                <div>\n                    <span>humidity</span> <br />\n                    <span>{props.humidity}%</span>\n                </div>\n                <div>\n                    <span>sunset</span>\n                    <br />\n                    <span>{props.sunsetTime}</span>\n                </div>\n                <div>\n                    <span>UV index</span> <br />\n                    <span>{props.uvi}</span>\n                </div>\n                <div>\n                    <span>feels like</span> <br />\n                    <span>{props.feelsLike}&deg;</span>\n                </div>\n            </div>\n        </div>\n    )\n\n    return currentWeatherCondition\n}\n\nexport default currentWeather\n","const kTOC = (temp) => {\n    return Math.round(temp - 273.15)\n}\n\nconst kTOF = (temp) => {\n    return Math.round((temp * 9) / 5 - 459.67)\n}\n\nexport { kTOC, kTOF }\n","import moment from 'moment-timezone'\n\nconst timeFormat = (timestamp, timezone, formatType) => {\n    const date = new Date(timestamp * 1000)\n    return moment(date).tz(timezone).format(formatType)\n}\n\nexport default timeFormat\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react'\n\nimport CurrentWeather from './currentWeather'\nimport Aux from '../../HOC/Aux'\nimport { kTOC, kTOF } from '../../shared/tempConverter'\nimport timeFormat from '../../shared/timeConverter'\n\nconst CurrentWeatherWrap = (props) => {\n    useEffect(() => {\n        const timeArray = []\n        // Separate the first eight Object from props.hourlyWeather and convert each timestamp to hour then put they into a array. [0, 3, 6, 9 , 12, 15 ...] By find out the final hour's index of the day (22, 23 or 0) to determine how many hourly items should be presented.\n        props.hourlyWeather.slice(0, 8).map((item) => {\n            const time = timeFormat(item.dt, props.timezone, 'H')\n            return timeArray.push(Number(time))\n        })\n        let todayEnd = null\n        if (timeArray.indexOf(0) !== -1) {\n            todayEnd = timeArray.indexOf(0)\n        } else if (timeArray.indexOf(22) !== -1) {\n            todayEnd = timeArray.indexOf(22)\n        } else {\n            todayEnd = timeArray.indexOf(23)\n        }\n\n        props.onSetTodayEndIndex(todayEnd + 1)\n\n        // only when timezone changed, the component go rendering. (while search location)\n    }, [props.timezone])\n\n    const {\n        humidity,\n        temp,\n        wind_speed,\n        uvi,\n        feels_like,\n        weatherDescription,\n        sunrise,\n        sunset,\n        weatherIcon,\n    } = props.currentWeather\n    const sunriseTime = timeFormat(sunrise, props.timezone, 'h:mm a')\n    const sunsetTime = timeFormat(sunset, props.timezone, 'h:mm a')\n\n    //* Get the timestamp of current time.\n    const currentTimeStamp = new Date().getTime() / 1000\n    const currentTime = timeFormat(currentTimeStamp, props.timezone, 'MMMM Do YYYY HH:mm')\n\n    //* Swift temperature type and change the button color.\n    let temperature = 0,\n        feelsLike = ''\n\n    if (props.temperatureType) {\n        temperature = kTOC(temp)\n        feelsLike = kTOC(feels_like)\n    } else {\n        temperature = kTOF(temp)\n        feelsLike = kTOF(feels_like)\n    }\n    //* ------------------------------\n    return (\n        <Aux>\n            <CurrentWeather\n                hourlyWeather={props.hourlyWeather}\n                timezone={props.timezone}\n                humidity={humidity}\n                temp={temperature}\n                wind_speed={wind_speed}\n                uvi={uvi}\n                weatherDescription={weatherDescription}\n                weatherIcon={weatherIcon}\n                sunriseTime={sunriseTime}\n                sunsetTime={sunsetTime}\n                feelsLike={feelsLike}\n                timeShown={currentTime}\n                cityShown={props.position}\n                switchFtoC={props.onSwitchTempTypeFtoC}\n                switchCtoF={props.onSwitchTempTypeCtoF}\n                temperatureType={props.temperatureType}\n            />\n        </Aux>\n    )\n}\n\nexport default CurrentWeatherWrap\n","import React from 'react'\n\nimport classes from '../../style/css/dailyWeather.module.css'\n\nconst dailyWeather = (props) => {\n    return (\n        <div className={classes.DailyWeather} onClick={props.clickTarget}>\n            <div>{props.time}</div>\n            <img src={`http://openweathermap.org/img/wn/${props.weatherIcon}@4x.png`} alt=\"icon\" />\n            <p>{props.weatherDescription}</p>\n            <section>\n                <div>{props.minTemp}&deg;</div>\n                <div>{props.maxTemp}&deg;</div>\n            </section>\n            <section>\n                <div>\n                    <span className=\"iconify\" data-icon=\"wi:sunrise\" data-inline=\"false\"></span> {props.sunriseTime}\n                </div>\n                <div>\n                    <span className=\"iconify\" data-icon=\"wi:sunset\" data-inline=\"false\"></span> {props.sunsetTime}\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default dailyWeather\n","import React from 'react'\n\nimport DailyWeather from './dailyWeather'\nimport { kTOC, kTOF } from '../../shared/tempConverter'\nimport timeFormat from '../../shared/timeConverter'\nimport classes from '../../style/css/dailyWeatherWrap.module.css'\n\nconst DailyWeatherWrap = (props) => {\n    // render the first five days normally.\n    let dayStart = 0\n    let dayEnd = 5\n\n    let timezone = props.timezone\n    let currentTime = null\n\n    // After 2300, the first component of daily weather should be presented to tomorrow's information.\n    if (timezone) {\n        const currentTimeStamp = new Date().getTime() / 1000\n        currentTime = timeFormat(currentTimeStamp, timezone, 'HH')\n        if (currentTime >= 23) {\n            dayStart = 1\n            dayEnd = 6\n        }\n    }\n\n    let dailyWeather = props.dailyWeather.slice(dayStart, dayEnd).map((item, i) => {\n        const sunriseTime = timeFormat(item.sunrise, timezone, 'HH:mm')\n        const sunsetTime = timeFormat(item.sunset, timezone, 'HH:mm')\n        const time = timeFormat(item.dt, timezone, 'MM/DD ddd')\n        const weatherIcon = item.weather[0].icon\n        const weatherDescription = item.weather[0].description\n\n        let maxTemperature,\n            minTemperature = ''\n\n        if (props.temperatureType) {\n            maxTemperature = kTOC(item.temp.max)\n            minTemperature = kTOC(item.temp.min)\n        } else {\n            maxTemperature = kTOF(item.temp.max)\n            minTemperature = kTOF(item.temp.min)\n        }\n\n        const onClickTargetHandler = () => {\n            const countPerDay = 8\n\n            let tomorrowStart = props.index.todayEnd\n            let dailyWeatherStart = (i - 1) * countPerDay + tomorrowStart\n            if (dailyWeatherStart <= 0) {\n                dailyWeatherStart = 0\n            }\n            let dailyWeatherEnd = dailyWeatherStart + countPerDay\n            props.onGetIndex(dailyWeatherStart, dailyWeatherEnd)\n        }\n\n        return (\n            <DailyWeather\n                key={item.dt}\n                time={time}\n                weatherIcon={weatherIcon}\n                weatherDescription={weatherDescription}\n                maxTemp={maxTemperature}\n                minTemp={minTemperature}\n                sunriseTime={sunriseTime}\n                sunsetTime={sunsetTime}\n                clickTarget={(e) => onClickTargetHandler(e)}\n            />\n        )\n    })\n\n    return <div className={classes.DailyWeatherWrap}>{dailyWeather}</div>\n}\n\nexport default DailyWeatherWrap\n","import React from 'react'\n\nimport classes from '../../style/css/hourlyWeather.module.css'\n\nconst hourlyWeather = (props) => {\n    return (\n        <div className={classes.HourlyWeather}>\n            <div>{props.time}</div>\n            <img src={`http://openweathermap.org/img/wn/${props.weatherIcon}@4x.png`} alt=\"\" />\n            <p className={classes.WeatherDescription}>{props.weatherDescription}</p>\n            <section>\n                <div>\n                    <span className=\"iconify\" data-icon=\"ic:round-cloud-queue\" data-inline=\"false\"></span>\n                    <span> {props.cloud} %</span>\n                </div>\n                <div>\n                    <span className=\"iconify\" data-icon=\"carbon:temperature\" data-inline=\"false\"></span>\n                    <span> {props.temp}&deg;</span>\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default hourlyWeather\n","import React from 'react'\n\n// import Aux from '../HOC/Aux'\nimport { kTOC, kTOF } from '../../shared/tempConverter'\nimport timeFormat from '../../shared/timeConverter'\nimport classes from '../../style/css/hourlyWeatherWrap.module.css'\nimport HourlyWeather from './hourlyWeather'\n\nconst hourlyWeatherWrap = (props) => {\n    //* decide what kind of temperature type should be rendered.\n    const tempTypeHandler = (item) => {\n        let temperature = ''\n\n        if (props.temperatureType) {\n            temperature = kTOC(item.main.temp)\n        } else {\n            temperature = kTOF(item.main.temp)\n        }\n\n        return temperature\n    }\n    //* ========================================================\n\n    //* decide which index of hourly weather should be rendered.\n    let hourlyWeather = null\n\n    // first rendering or when index.start <=0\n    let hourlyWeatherStart = 0\n    let hourlyWeatherEnd = props.index.todayEnd\n    if (props.index.start && props.index.end) {\n        // if index.start <=0, render the component above.\n        hourlyWeatherStart = props.index.start\n        hourlyWeatherEnd = props.index.end\n    }\n    //* ========================================================\n\n    if (props.hourlyWeather) {\n        hourlyWeather = props.hourlyWeather.slice(hourlyWeatherStart, hourlyWeatherEnd).map((item) => {\n            const {\n                dt,\n                weather: [{ description, icon }],\n                clouds: { all },\n            } = item\n            const time = timeFormat(dt, props.timezone, 'HH:mm')\n\n            const temperature = tempTypeHandler(item)\n\n            return (\n                <HourlyWeather\n                    key={item.dt}\n                    time={time}\n                    weatherDescription={description}\n                    weatherIcon={icon}\n                    temp={temperature}\n                    cloud={all}\n                />\n            )\n        })\n    }\n\n    return <div className={classes.HourlyWeatherWrap}>{hourlyWeather}</div>\n}\n\nexport default hourlyWeatherWrap\n","import React, { Component } from 'react'\n\nimport Aux from '../HOC/Aux'\n\nclass ErrorBoundary extends Component {\n    state = { hasError: false, error: null }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true, error: error })\n        console.log(error, errorInfo)\n    }\n\n    render() {\n        return <Aux>{this.state.hasError ? <p>something went wrong</p> : this.props.children}</Aux>\n    }\n}\n\nexport default ErrorBoundary\n","import React from 'react'\n\nimport classes from '../style/css/errorInfo.module.css'\n\nconst errorInfo = () => {\n    return (\n        <div className={classes.ErrorInfo}>\n            <section>\n                <span className=\"iconify\" data-icon=\"icomoon-free:sad\" data-inline=\"false\"></span>\n                <p>Sorry! this location could not be found. Please try again...</p>\n            </section>\n        </div>\n    )\n}\n\nexport default errorInfo\n","import React from 'react'\n\nimport classes from '../style/css/spinner.module.css'\nimport Aux from '../HOC/Aux'\n\nconst spinner = () => {\n    return (\n        <Aux>\n            <div className={classes.loader}></div>\n            <p>Start fetching the weather forecast near your location...</p>\n        </Aux>\n    )\n}\n\nexport default spinner\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Route, Redirect } from 'react-router-dom'\n\nimport Aux from '../HOC/Aux'\nimport Title from '../components/title'\nimport Input from '../components/input'\nimport * as actions from '../store/actions/forecast'\nimport { OpenWeatherAPIKey, googleGeoAPIKey } from '../APIKey.js'\nimport CurrentWeatherWrap from '../components/currentWeather/currentWeatherWrap'\nimport DailyWeatherWrap from '../components/dailyWeather/dailyWeatherWrap'\nimport HourlyWeatherWrap from '../components/hourlyWeather/hourlyWeatherWrap'\nimport ErrorBoundary from './ErrorBoundary'\nimport ErrorInfo from '../components/errorInfo'\nimport classes from '../style/css/home.module.css'\nimport Spinner from '../components/spinner'\n\nclass Home extends Component {\n    componentDidMount() {\n        setTimeout(() => {\n            this.props.onCurrentLocationSearch(OpenWeatherAPIKey, googleGeoAPIKey)\n        }, 1000)\n    }\n\n    onKeyDownHandler = (e) => {\n        if (e.keyCode === 13) {\n            const location = e.target.value\n            this.props.onCitySearch(location, OpenWeatherAPIKey, googleGeoAPIKey)\n        }\n    }\n\n    render() {\n        let weatherForecast = null\n        let redirectToError = null\n\n        redirectToError = this.props.error ? <Redirect to=\"/error\" /> : null\n        let router = <Route path=\"/error\" component={ErrorInfo} />\n\n        let homeClass = [classes.Home]\n        if (this.props.currentWeather && this.props.error === null) {\n            homeClass.push(classes.changed)\n\n            weatherForecast = (\n                <Aux>\n                    <Redirect to=\"/\" />\n                    <CurrentWeatherWrap\n                        currentWeather={this.props.currentWeather}\n                        timezone={this.props.timezone}\n                        position={this.props.position}\n                        temperatureType={this.props.temperatureType}\n                        onSwitchTempTypeFtoC={this.props.onSwitchTempTypeFtoC}\n                        onSwitchTempTypeCtoF={this.props.onSwitchTempTypeCtoF}\n                        hourlyWeather={this.props.hourlyWeather}\n                        onSetTodayEndIndex={this.props.onSetTodayEndIndex}\n                    />\n                    <HourlyWeatherWrap\n                        index={this.props.index}\n                        hourlyWeather={this.props.hourlyWeather}\n                        timezone={this.props.timezone}\n                        temperatureType={this.props.temperatureType}\n                    />\n                    <DailyWeatherWrap\n                        onGetIndex={this.props.onGetIndex}\n                        timezone={this.props.timezone}\n                        dailyWeather={this.props.dailyWeather}\n                        temperatureType={this.props.temperatureType}\n                        index={this.props.index}\n                    />\n                </Aux>\n            )\n        }\n\n        return (\n            <Aux>\n                <ErrorBoundary>\n                    <Title />\n                    {this.props.currentWeather ? null : <Spinner />}\n                    <Input\n                        KeyDown={(e) => this.onKeyDownHandler(e)}\n                        currentWeather={this.props.currentWeather}\n                        error={this.props.error}\n                    />\n                    {redirectToError}\n                    {router}\n                    <div className={homeClass.join(' ')}>{weatherForecast}</div>\n                </ErrorBoundary>\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentWeather: state.currentWeather,\n        dailyWeather: state.dailyWeather,\n        hourlyWeather: state.hourlyWeather,\n        timezone: state.timezone,\n        index: state.index,\n        latLon: state.latLon,\n        position: state.position,\n        temperatureType: state.temperatureType,\n        error: state.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onCitySearch: (location, OWAPIKey, GoogleAPIKey) =>\n            dispatch(actions.citySearch(location, OWAPIKey, GoogleAPIKey)),\n        onCurrentLocationSearch: (OWAPIKey, GoogleAPIKey) =>\n            dispatch(actions.currentLocationSearch(OWAPIKey, GoogleAPIKey)),\n        onSwitchTempTypeFtoC: () => dispatch(actions.switchTempTypeFtoC()),\n        onSwitchTempTypeCtoF: () => dispatch(actions.switchTempTypeCtoF()),\n        onGetIndex: (start, end) => dispatch(actions.getIndex(start, end)),\n        onSetTodayEndIndex: (todayEnd) => dispatch(actions.setTodayEndIndex(todayEnd)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n","import React from 'react'\nimport Aux from '../HOC/Aux'\nimport classes from '../style/css/layout.module.css'\n\nconst layout = (props) => {\n    return (\n        <Aux>\n            <main className={classes.Layout}>{props.children}</main>\n        </Aux>\n    )\n}\n\nexport default layout\n","import React from 'react'\n\nimport './style/css/App.css'\nimport Home from './containers/Home'\nimport Layout from './components/layout'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Layout>\n                <Home />\n            </Layout>\n        </div>\n    )\n}\n\nexport default App\n","export const updateObj = (oldObj, updatedProperties) => {\n    return {\n        ...oldObj,\n        ...updatedProperties,\n    }\n}\n","import * as actionTypes from '../actions/actionTypes'\nimport { updateObj } from '../../shared/utility'\n\nconst initialState = {\n    currentWeather: null,\n    dailyWeather: [],\n    hourlyWeather: [],\n    timezone: '',\n    position: null,\n    latLon: {},\n    error: null,\n    temperatureType: true,\n    index: { todayEnd: null, start: null, end: null },\n}\n\nconst fetchForecastSuccess = (state, action) => {\n    const {\n        humidity,\n        sunrise,\n        sunset,\n        temp,\n        wind_speed,\n        uvi,\n        feels_like,\n        weather: [{ description: weatherDescription }],\n        weather: [{ icon: weatherIcon }],\n    } = action.weatherForecastData.current\n\n    return updateObj(state, {\n        currentWeather: {\n            humidity,\n            sunrise,\n            sunset,\n            temp,\n            wind_speed,\n            uvi,\n            feels_like,\n            weatherDescription,\n            weatherIcon,\n        },\n        dailyWeather: action.weatherForecastData.daily,\n        hourlyWeather: action.currentLocationDailyWeatherData.list,\n        latLon: {\n            lat: action.lat,\n            lon: action.lon,\n        },\n        timezone: action.weatherForecastData.timezone,\n        position: action.position,\n        error: null,\n    })\n}\n\nconst fetchForecastFailed = (state, action) => {\n    return updateObj(state, {\n        error: action.error,\n    })\n}\n\nconst switchTempTypeFtoC = (state, action) => {\n    return updateObj(state, {\n        temperatureType: true,\n    })\n}\n\nconst switchTempTypeCtoF = (state, action) => {\n    return updateObj(state, {\n        temperatureType: false,\n    })\n}\n\nconst setTodayEndIndex = (state, action) => {\n    return updateObj(state, {\n        index: { todayEnd: action.todayEnd },\n    })\n}\n\nconst getIndex = (state, action) => {\n    return updateObj(state, {\n        index: {\n            ...state.index,\n            start: action.index[0],\n            end: action.index[1],\n        },\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    // eslint-disable-next-line default-case\n    switch (action.type) {\n        case actionTypes.FETCH_FORECAST_SUCCESS:\n            return fetchForecastSuccess(state, action)\n        case actionTypes.FETCH_FORECAST_FAILED:\n            return fetchForecastFailed(state, action)\n        case actionTypes.SWITCH_TEMP_TYPE_F_TO_C:\n            return switchTempTypeFtoC(state, action)\n        case actionTypes.SWITCH_TEMP_TYPE_C_TO_F:\n            return switchTempTypeCtoF(state, action)\n        case actionTypes.SET_TODAY_END_INDEX:\n            return setTodayEndIndex(state, action)\n        case actionTypes.GET_INDEX:\n            return getIndex(state, action)\n    }\n    return state\n}\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport thunk from 'redux-thunk'\n\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\nimport './style/css/index.css'\nimport reducer from './store/reducer/forecast'\n\nconst composeEnhancers =\n    process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)))\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}